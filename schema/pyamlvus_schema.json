{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://raw.githubusercontent.com/D-Joey-G/pyamlvus/main/schema/pyamlvus_schema.json",
  "title": "Milvus YAML Schema",
  "description": "JSON Schema for validating Milvus collection YAML files used by pyamlvus.",
  "markdownDescription": "Define Milvus collections declaratively in YAML.\n\nHighlights:\n- Strong typing for fields and parameters\n- Conditional rules for vectors, arrays, and VARCHAR\n- Index and function scaffolds with sensible defaults\n\nUse with the Red Hat YAML extension for completions and hover docs.",
  "type": "object",
  "additionalProperties": false,
  "required": [
    "name",
    "fields"
  ],
  "examples": [
    {
      "name": "user_collection",
      "description": "User profile collection",
      "fields": [
        {
          "name": "id",
          "type": "int64",
          "is_primary": true,
          "auto_id": false
        },
        {
          "name": "username",
          "type": "varchar",
          "max_length": 100,
          "enable_match": true
        },
        {
          "name": "embedding",
          "type": "float_vector",
          "dim": 768
        }
      ],
      "indexes": [
        {
          "field": "embedding",
          "type": "IVF_FLAT",
          "metric": "L2",
          "params": {
            "nlist": 1024
          }
        },
        {
          "field": "username",
          "type": "TRIE"
        }
      ],
      "settings": {
        "consistency_level": "Strong",
        "enable_dynamic_field": true
      }
    }
  ],
  "definitions": {
    "FieldTypeEnum": {
      "type": "string",
      "enum": [
        "int8",
        "int16",
        "int32",
        "int64",
        "bool",
        "float",
        "double",
        "varchar",
        "json",
        "array",
        "float_vector",
        "float16_vector",
        "bfloat16_vector",
        "binary_vector",
        "int8_vector",
        "sparse_float_vector"
      ]
    },
    "ElementTypeEnum": {
      "type": "string",
      "enum": [
        "bool",
        "int8",
        "int16",
        "int32",
        "int64",
        "float",
        "double",
        "varchar",
        "json"
      ]
    },
    "IndexTypeEnum": {
      "type": "string",
      "enum": [
        "FLAT",
        "IVF_FLAT",
        "IVF_SQ8",
        "IVF_PQ",
        "IVF_RABITQ",
        "HNSW",
        "DISKANN",
        "AUTOINDEX",
        "GPU_IVF_FLAT",
        "GPU_IVF_PQ",
        "GPU_CAGRA",
        "GPU_BRUTE_FORCE",
        "BIN_FLAT",
        "BIN_IVF_FLAT",
        "MINHASH_LSH",
        "SPARSE_INVERTED_INDEX",
        "INVERTED",
        "BITMAP",
        "TRIE",
        "STL_SORT"
      ]
    },
    "MetricEnum": {
      "type": "string",
      "enum": [
        "L2",
        "IP",
        "COSINE",
        "HAMMING",
        "JACCARD",
        "TANIMOTO",
        "BM25"
      ]
    },
    "FunctionTypeEnum": {
      "type": "string",
      "enum": [
        "BM25",
        "TEXT_EMBEDDING",
        "RERANK"
      ]
    },
    "ConsistencyEnum": {
      "type": "string",
      "enum": [
        "Strong",
        "Bounded",
        "Eventually"
      ]
    },
    "FieldDefinition": {
      "title": "Field Definition",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Field name",
          "pattern": "^(?!_)[A-Za-z0-9_-]+$",
          "markdownDescription": "Field name. Cannot start with underscore. Allowed: letters, digits, `_`, `-`."
        },
        "description": {
          "type": "string",
          "markdownDescription": "Optional field description."
        },
        "type": {
          "$ref": "#/definitions/FieldTypeEnum",
          "markdownDescription": "Field data type. See README for supported types and requirements."
        },
        "is_primary": {
          "type": "boolean",
          "markdownDescription": "Marks this field as the primary key (exactly one required overall)."
        },
        "auto_id": {
          "type": "boolean",
          "markdownDescription": "If true on the primary key, IDs are auto-generated by Milvus."
        },
        "nullable": {
          "type": "boolean",
          "markdownDescription": "If true, field values may be null (when supported)."
        },
        "enable_analyzer": {
          "type": "boolean",
          "markdownDescription": "Enable text analyzer (e.g., for BM25 inputs). Defaults to false."
        },
        "enable_match": {
          "type": "boolean",
          "markdownDescription": "Enable TEXT_MATCH expressions on this VARCHAR field."
        },
        "analyzer_params": {
          "type": "object",
          "markdownDescription": "Analyzer configuration (e.g., { \"type\": \"english\" })."
        },
        "multi_analyzer_params": {
          "type": "object",
          "markdownDescription": "Multi-analyzer configuration when multiple analyzers are desired."
        },
        "params": {
          "type": "object",
          "markdownDescription": "Additional type-specific parameters. Most types donâ€™t require this."
        },
        "max_length": {
          "type": "integer",
          "minimum": 1,
          "maximum": 65535,
          "description": "Required for varchar fields; for varchar array element as well.",
          "markdownDescription": "VARCHAR maximum length (required for VARCHAR)."
        },
        "dim": {
          "type": "integer",
          "minimum": 1,
          "description": "Required for float_vector and binary_vector. Optional for sparse_float_vector.",
          "markdownDescription": "Vector dimension (required for dense vectors)."
        },
        "element_type": {
          "$ref": "#/definitions/ElementTypeEnum",
          "markdownDescription": "Array element type (required for ARRAY)."
        },
        "max_capacity": {
          "type": "integer",
          "minimum": 1,
          "maximum": 4096,
          "description": "Required for array fields.",
          "markdownDescription": "Maximum number of elements for ARRAY fields."
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "varchar"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "required": [
              "max_length"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "float_vector"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "required": [
              "dim"
            ],
            "properties": {
              "dim": {
                "maximum": 32768
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "binary_vector"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "required": [
              "dim"
            ],
            "properties": {
              "dim": {
                "maximum": 262144
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "array"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "required": [
              "element_type",
              "max_capacity"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "array"
              },
              "element_type": {
                "const": "varchar"
              }
            },
            "required": [
              "type",
              "element_type"
            ]
          },
          "then": {
            "required": [
              "max_length"
            ]
          }
        }
      ]
    },
    "IndexParams": {
      "type": "object",
      "description": "Index parameters (vary by index type).",
      "properties": {
        "nlist": {
          "type": "integer",
          "minimum": 1,
          "markdownDescription": "IVF parameter: number of clusters."
        },
        "M": {
          "type": "integer",
          "minimum": 1,
          "markdownDescription": "HNSW parameter: graph degree (M)."
        },
        "efConstruction": {
          "type": "integer",
          "minimum": 1,
          "markdownDescription": "HNSW parameter: efConstruction."
        },
        "m": {
          "type": "integer",
          "minimum": 1,
          "markdownDescription": "PQ parameter: number of sub-vectors (m)."
        },
        "inverted_index_algo": {
          "type": "string",
          "enum": [
            "DAAT_MAXSCORE",
            "DAAT_BM25"
          ],
          "markdownDescription": "Sparse inverted index algorithm."
        },
        "bm25_k1": {
          "type": "number",
          "exclusiveMinimum": 0,
          "markdownDescription": "BM25 parameter k1 (positive)."
        },
        "bm25_b": {
          "type": "number",
          "exclusiveMinimum": 0,
          "markdownDescription": "BM25 parameter b (positive)."
        }
      },
      "additionalProperties": true
    },
    "IndexDefinition": {
      "title": "Index Definition",
      "type": "object",
      "additionalProperties": false,
      "required": [
        "field"
      ],
      "properties": {
        "field": {
          "type": "string",
          "markdownDescription": "Name of the field being indexed."
        },
        "type": {
          "$ref": "#/definitions/IndexTypeEnum",
          "markdownDescription": "Index type for the field (case-insensitive in the toolchain)."
        },
        "metric": {
          "$ref": "#/definitions/MetricEnum",
          "markdownDescription": "Similarity metric. For SPARSE_INVERTED_INDEX with BM25, use BM25."
        },
        "params": {
          "$ref": "#/definitions/IndexParams"
        }
      }
    },
    "FunctionParamsTextEmbedding": {
      "type": "object",
      "required": [
        "model"
      ],
      "properties": {
        "model": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "FunctionParamsBM25": {
      "type": "object",
      "properties": {
        "k1": {
          "type": "number",
          "exclusiveMinimum": 0
        },
        "b": {
          "type": "number",
          "exclusiveMinimum": 0
        }
      },
      "additionalProperties": true
    },
    "FunctionDefinition": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "type"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/FunctionTypeEnum",
          "markdownDescription": "Function type. Aliases (case/underscore insensitive) are accepted by tooling (e.g., TEXTEMBED, RANKER)."
        },
        "input_field_names": {
          "description": "List of input fields.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1
        },
        "input_fields": {
          "description": "Alias for input_field_names.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1
        },
        "fields": {
          "description": "Alias for input_field_names.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1
        },
        "input_field": {
          "type": "string"
        },
        "field": {
          "type": "string"
        },
        "output_field_names": {
          "description": "Output field(s) for function results.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1
        },
        "output_field": {
          "type": "string"
        },
        "params": {
          "type": "object",
          "markdownDescription": "Function-specific parameters. For TEXT_EMBEDDING, `model` is required; BM25 accepts `k1` and `b`."
        }
      },
      "allOf": [
        {
          "anyOf": [
            {
              "required": [
                "input_field_names"
              ]
            },
            {
              "required": [
                "input_fields"
              ]
            },
            {
              "required": [
                "fields"
              ]
            },
            {
              "required": [
                "input_field"
              ]
            },
            {
              "required": [
                "field"
              ]
            }
          ]
        },
        {
          "anyOf": [
            {
              "required": [
                "output_field_names"
              ]
            },
            {
              "required": [
                "output_field"
              ]
            }
          ]
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "TEXT_EMBEDDING"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "required": [
              "params"
            ],
            "properties": {
              "params": {
                "$ref": "#/definitions/FunctionParamsTextEmbedding"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "BM25"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "params": {
                "$ref": "#/definitions/FunctionParamsBM25"
              }
            }
          }
        }
      ]
    },
    "Settings": {
      "type": "object",
      "additionalProperties": false,
      "markdownDescription": "Collection-level settings that affect behavior at runtime (not all flow into CollectionSchema).",
      "properties": {
        "consistency_level": {
          "$ref": "#/definitions/ConsistencyEnum",
          "description": "Milvus consistency level.",
          "markdownDescription": "Query consistency level: Strong, Session (Bounded), or Eventually."
        },
        "ttl_seconds": {
          "type": "integer",
          "minimum": 0,
          "markdownDescription": "Optional time-to-live for entities (seconds)."
        },
        "enable_dynamic_field": {
          "type": "boolean",
          "markdownDescription": "Enable Milvus dynamic fields for storing extra attributes."
        },
        "autoindex": {
          "type": "boolean",
          "markdownDescription": "Enable automatic index type selection."
        },
        "enable_autoindex": {
          "type": "boolean",
          "markdownDescription": "Alias for autoindex."
        },
        "use_autoindex": {
          "type": "boolean",
          "markdownDescription": "Alias for autoindex."
        }
      }
    }
  },
  "properties": {
    "name": {
      "type": "string",
      "description": "Collection name (letters, digits, underscores; must start with a letter).",
      "pattern": "^[A-Za-z][A-Za-z0-9_]*$",
      "markdownDescription": "Collection name. Must start with a letter and contain only letters, digits, and underscores.",
      "examples": [
        "my_collection",
        "Users",
        "collection_01"
      ]
    },
    "alias": {
      "type": "string",
      "description": "Optional collection alias (same rules as name).",
      "pattern": "^[A-Za-z][A-Za-z0-9_]*$",
      "markdownDescription": "Optional alias for the collection. Same rules as name.",
      "examples": [
        "users",
        "prod_users"
      ]
    },
    "description": {
      "type": "string",
      "markdownDescription": "Human-readable description of the collection."
    },
    "autoindex": {
      "type": "boolean",
      "description": "Enable automatic index type selection for missing index types.",
      "markdownDescription": "If true, unspecified index types may resolve to AUTOINDEX (or SPARSE_INVERTED_INDEX for BM25 outputs)."
    },
    "enable_autoindex": {
      "type": "boolean",
      "description": "Alias of autoindex. Prefer using 'autoindex'."
    },
    "use_autoindex": {
      "type": "boolean",
      "description": "Alias of autoindex. Prefer using 'autoindex'."
    },
    "fields": {
      "type": "array",
      "minItems": 1,
      "markdownDescription": "Field definitions for the collection.",
      "items": {
        "$ref": "#/definitions/FieldDefinition"
      }
    },
    "indexes": {
      "type": "array",
      "description": "Index definitions.",
      "markdownDescription": "Per-field index definitions. If `autoindex` is enabled and type is omitted, AUTOINDEX may be used.",
      "items": {
        "$ref": "#/definitions/IndexDefinition"
      }
    },
    "functions": {
      "type": "array",
      "description": "Function definitions (e.g., BM25, TEXT_EMBEDDING).",
      "markdownDescription": "Define functions that derive or annotate fields (e.g., BM25 scoring to a sparse vector field, or TEXT_EMBEDDING into a dense vector).",
      "items": {
        "$ref": "#/definitions/FunctionDefinition"
      }
    },
    "settings": {
      "$ref": "#/definitions/Settings"
    }
  }
}
